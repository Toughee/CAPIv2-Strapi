"""Bark Mound Sites"""
type Bmsite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  verified: Boolean
  visible: Boolean
}

"""Bodies stored in the Canonn database"""
type Body {
  id: String!
  createdAt: String!
  updatedAt: String!
  system: System
  bodyName: String!
  edsmID: Float
  edsmID64: Float
  bodyType: Bodytype
  bodySubtype: Bodysubtype
  edsmOffset: Int
  edsmDistanceToArrival: Float
  edsmIsMainStar: Boolean
  edsmIsScoopable: Boolean
  edsmIsLandable: Boolean
  edsmAge: Int
  edsmLuminosity: String
  edsmAbsoluteMagnitude: Float
  edsmSolarMasses: Float
  edsmSolarRadius: Float
  edsmGravity: Float
  edsmEarthMasses: Float
  edsmRadius: Float
  edsmSurfaceTemperature: Float
  edsmVolcanismType: String
  edsmAtmosphereType: String
  bodyAtmosphere: Bodyatmosphere
  bodyMaterial: Bodymaterial
  edsmTerraformingState: String
  edsmOrbitalPeriod: Float
  edsmSemiMajorAxis: Float
  edsmOrbitalEccentricity: Float
  edsmOrbitalInclination: Float
  edsmArgOfPeriapsis: Float
  edsmRotationalPeriod: Float
  edsmRotationalPeriodTidallyLocked: Boolean
  edsmAxialTilt: Float
  rings(sort: String, limit: Int, start: Int, where: JSON): [Ring]
  bodyLocations(sort: String, limit: Int, start: Int, where: JSON): [Location]
}

"""Atmosphere makup of a body"""
type Bodyatmosphere {
  id: String!
  createdAt: String!
  updatedAt: String!
  body: Body
  argon: Float
  ammonia: Float
}

"""Material makeup of a body"""
type Bodymaterial {
  id: String!
  createdAt: String!
  updatedAt: String!
  body: Body
  antimony: Float
}

"""Body Subtype"""
type Bodysubtype {
  id: String!
  createdAt: String!
  updatedAt: String!
  subtype: String!
}

"""Type of a body"""
type Bodytype {
  id: String!
  createdAt: String!
  updatedAt: String!
  type: String!
}

"""Brain Tree Sites"""
type Btsite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  verified: Boolean
  visible: Boolean
}

enum ENUM_LOCATION_LOCATIONTYPE {
  BM
  BT
  FG
  FM
  GEN
  GR
  GS
  GY
  LS
  MS
  TB
  TS
  TW
  USS
}

"""Fungal Gourd Sites"""
type Fgsite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  verified: Boolean
  visible: Boolean
}

"""Fumarole Sites"""
type Fmsite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  type: Fmtype
  verified: Boolean
  visible: Boolean
}

"""Type of Fumarole"""
type Fmtype {
  id: String!
  createdAt: String!
  updatedAt: String!
  type: String!
}

"""Generation Ship Sites"""
type Gensite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  shipName: String!
  directionSystem: System
  distance: Float
}

"""Artifacts used in the Guardian Ruins"""
type Grartifact {
  id: String!
  createdAt: String!
  updatedAt: String!
  artifactName: String!
}

"""Category of data recieved from Guardian Ruin Obelisks"""
type Grcodexcategories {
  id: String!
  createdAt: String!
  updatedAt: String!
  categoryName: String
}

"""Data entires received at a Guardian Ruin site"""
type Grcodexdata {
  id: String!
  createdAt: String!
  updatedAt: String!
  grCodexCategory: Grcodexcategories
  grPrimaryArtifact: Grartifact
  grSecondaryArtifact: Grartifact
  codexNumber: Int!
  text: String!
}

"""Obelisks at a Guardian Ruin Site"""
type Grobelisk {
  id: String!
  createdAt: String!
  updatedAt: String!
  grType: Grtype
  grObeliskGroup: Grobeliskgroup
  obeliskNumber: Int!
  broken: Boolean
  grCodexData: Grcodexdata
  verified: Boolean
}

"""Groups of Obelisks at a Guardian Ruin site"""
type Grobeliskgroup {
  id: String!
  createdAt: String!
  updatedAt: String!
  grType: Grtype
  groupName: String!
  amount: Int!
}

"""Guardian Ruin Site"""
type Grsite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  type: Grtype
  verified: Boolean
  visible: Boolean
}

"""Guardian Ruin site type"""
type Grtype {
  id: String!
  createdAt: String!
  updatedAt: String!
  type: String!
}

"""Guardian Structure Sites"""
type Gssite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  type: Gstype
  hasDatabank: Boolean
  verified: Boolean
  visible: Boolean
}

"""Guardian Structure site type"""
type Gstype {
  id: String!
  createdAt: String!
  updatedAt: String!
  type: String!
}

"""Geyser Sites"""
type Gysite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  type: Gytype
  verified: Boolean
  visible: Boolean
}

"""Geyser type"""
type Gytype {
  id: String!
  createdAt: String!
  updatedAt: String!
  type: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Locations for sites within a System, Body, or Ring"""
type Location {
  id: String!
  createdAt: String!
  updatedAt: String!
  system: System
  body: Body
  ring: Ring
  locationType: ENUM_LOCATION_LOCATIONTYPE
  bmSite: Bmsite
  btSite: Btsite
  fgSite: Fgsite
  fmSite: Fmsite
  genSite: Gensite
  grSite: Grsite
  gsSite: Gssite
  gySite: Gysite
  lsSite: Lssite
  msSite: Mssite
  tbSite: Tbsite
  tsSite: Tssite
  twSite: Twsite
  ussSite: Usssite
}

"""Lava Spout Sites"""
type Lssite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  type: Lstype
  verified: Boolean
  visible: Boolean
}

"""Lava Spout type"""
type Lstype {
  id: String!
  createdAt: String!
  updatedAt: String!
  type: String!
}

union Morph = Bmsite | Body | Bodyatmosphere | Bodymaterial | Bodysubtype | Bodytype | Btsite | Fgsite | Fmsite | Fmtype | Gensite | Grartifact | Grcodexcategories | Grcodexdata | Grobelisk | Grobeliskgroup | Grsite | Grtype | Gssite | Gstype | Gysite | Gytype | Location | Lssite | Lstype | Mssite | Mstype | Ring | Ringtype | System | Tbsite | Tbtype | Tssite | Tsstatus | Twsite | Usssite | Usstype | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

"""Mega-Ship Sites"""
type Mssite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  shipName: String!
  shipTag: String
  type: Mstype
  flightOps: Boolean
  flightSchedule: Boolean
  dockable: Boolean
}

"""Mega-Ship types"""
type Mstype {
  id: String!
  createdAt: String!
  updatedAt: String!
  type: String!
}

type Query {
  bmsite(id: String!): Bmsite
  bmsites(sort: String, limit: Int, start: Int, where: JSON): [Bmsite]
  body(id: String!): Body
  bodies(sort: String, limit: Int, start: Int, where: JSON): [Body]
  bodyatmosphere(id: String!): Bodyatmosphere
  bodyatmospheres(sort: String, limit: Int, start: Int, where: JSON): [Bodyatmosphere]
  bodymaterial(id: String!): Bodymaterial
  bodymaterials(sort: String, limit: Int, start: Int, where: JSON): [Bodymaterial]
  bodysubtype(id: String!): Bodysubtype
  bodysubtypes(sort: String, limit: Int, start: Int, where: JSON): [Bodysubtype]
  bodytype(id: String!): Bodytype
  bodytypes(sort: String, limit: Int, start: Int, where: JSON): [Bodytype]
  btsite(id: String!): Btsite
  btsites(sort: String, limit: Int, start: Int, where: JSON): [Btsite]
  fgsite(id: String!): Fgsite
  fgsites(sort: String, limit: Int, start: Int, where: JSON): [Fgsite]
  fmsite(id: String!): Fmsite
  fmsites(sort: String, limit: Int, start: Int, where: JSON): [Fmsite]
  fmtype(id: String!): Fmtype
  fmtypes(sort: String, limit: Int, start: Int, where: JSON): [Fmtype]
  gensite(id: String!): Gensite
  gensites(sort: String, limit: Int, start: Int, where: JSON): [Gensite]
  grartifact(id: String!): Grartifact
  grartifacts(sort: String, limit: Int, start: Int, where: JSON): [Grartifact]
  grcodexcategory(id: String!): Grcodexcategories
  grcodexcategories(sort: String, limit: Int, start: Int, where: JSON): [Grcodexcategories]
  grcodexdatum(id: String!): Grcodexdata
  grcodexdata(sort: String, limit: Int, start: Int, where: JSON): [Grcodexdata]
  grobelisk(id: String!): Grobelisk
  grobelisks(sort: String, limit: Int, start: Int, where: JSON): [Grobelisk]
  grobeliskgroup(id: String!): Grobeliskgroup
  grobeliskgroups(sort: String, limit: Int, start: Int, where: JSON): [Grobeliskgroup]
  grsite(id: String!): Grsite
  grsites(sort: String, limit: Int, start: Int, where: JSON): [Grsite]
  grtype(id: String!): Grtype
  grtypes(sort: String, limit: Int, start: Int, where: JSON): [Grtype]
  gssite(id: String!): Gssite
  gssites(sort: String, limit: Int, start: Int, where: JSON): [Gssite]
  gstype(id: String!): Gstype
  gstypes(sort: String, limit: Int, start: Int, where: JSON): [Gstype]
  gysite(id: String!): Gysite
  gysites(sort: String, limit: Int, start: Int, where: JSON): [Gysite]
  gytype(id: String!): Gytype
  gytypes(sort: String, limit: Int, start: Int, where: JSON): [Gytype]
  location(id: String!): Location
  locations(sort: String, limit: Int, start: Int, where: JSON): [Location]
  lssite(id: String!): Lssite
  lssites(sort: String, limit: Int, start: Int, where: JSON): [Lssite]
  lstype(id: String!): Lstype
  lstypes(sort: String, limit: Int, start: Int, where: JSON): [Lstype]
  mssite(id: String!): Mssite
  mssites(sort: String, limit: Int, start: Int, where: JSON): [Mssite]
  mstype(id: String!): Mstype
  mstypes(sort: String, limit: Int, start: Int, where: JSON): [Mstype]
  ring(id: String!): Ring
  rings(sort: String, limit: Int, start: Int, where: JSON): [Ring]
  ringtype(id: String!): Ringtype
  ringtypes(sort: String, limit: Int, start: Int, where: JSON): [Ringtype]
  system(id: String!): System
  systems(sort: String, limit: Int, start: Int, where: JSON): [System]
  tbsite(id: String!): Tbsite
  tbsites(sort: String, limit: Int, start: Int, where: JSON): [Tbsite]
  tbtype(id: String!): Tbtype
  tbtypes(sort: String, limit: Int, start: Int, where: JSON): [Tbtype]
  tssite(id: String!): Tssite
  tssites(sort: String, limit: Int, start: Int, where: JSON): [Tssite]
  tsstatus(id: String!): Tsstatus
  tsstatuses(sort: String, limit: Int, start: Int, where: JSON): [Tsstatus]
  twsite(id: String!): Twsite
  twsites(sort: String, limit: Int, start: Int, where: JSON): [Twsite]
  usssite(id: String!): Usssite
  usssites(sort: String, limit: Int, start: Int, where: JSON): [Usssite]
  usstype(id: String!): Usstype
  usstypes(sort: String, limit: Int, start: Int, where: JSON): [Usstype]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: String!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: String!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

"""Rings stored in the Canonn database"""
type Ring {
  id: String!
  createdAt: String!
  updatedAt: String!
  body: Body
  ringName: String!
  edsmType: Ringtype
  edsmMass: Float
  edsmInnerRadius: Float
  edsmOuterRadius: Float
  ringLocations(sort: String, limit: Int, start: Int, where: JSON): [Location]
}

"""Ring type"""
type Ringtype {
  id: String!
  createdAt: String!
  updatedAt: String!
  type: String!
}

"""Systems stored in the Canonn database"""
type System {
  id: String!
  createdAt: String!
  updatedAt: String!
  systemName: String!
  edsmID: Float
  edsmID64: Float
  edsmCoordX: Float
  edsmCoordY: Float
  edsmCoordZ: Float
  edsmCoordLocked: Boolean
  bodies(sort: String, limit: Int, start: Int, where: JSON): [Body]
  systemLocations(sort: String, limit: Int, start: Int, where: JSON): [Location]
  genSiteDirection(sort: String, limit: Int, start: Int, where: JSON): [Gensite]
}

"""Thargoid Barnacle Sites"""
type Tbsite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  type: Tbtype
  verified: Boolean
  visible: Boolean
}

"""Thargoid Barnacle type"""
type Tbtype {
  id: String!
  createdAt: String!
  updatedAt: String!
  type: String!
}

"""Thargoid Structure Sites"""
type Tssite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  status: Tsstatus
  verified: Boolean
  visible: Boolean
}

"""Status of a Thargoid Structure"""
type Tsstatus {
  id: String!
  createdAt: String!
  updatedAt: String!
  status: String!
}

"""Tube Worm Sites"""
type Twsite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  verified: Boolean!
  visible: Boolean
}

type UploadFile {
  id: String!
  createdAt: String!
  updatedAt: String!
  name: String!
  hash: String!
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UsersPermissionsPermission {
  id: String!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String!
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: String!
  name: String!
  description: String
  type: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
}

type UsersPermissionsUser {
  id: String!
  username: String!
  email: String!
  provider: String
  role: UsersPermissionsRole
}

"""Unknown Signal Source Sites"""
type Usssite {
  id: String!
  createdAt: String!
  updatedAt: String!
  location: Location
  type: Usstype
  threatLevel: Int
}

"""Type of Unknown Signal Sources"""
type Usstype {
  id: String!
  createdAt: String!
  updatedAt: String!
  type: String!
}
